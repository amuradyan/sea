( ; folds a list with a function and an accumulator
  (define fold
    (lambda (as acc f)
      (cond
        ((null? as) acc)
        (else (fold (cdr as) (f acc (car as)) f)))))

  (cons
    (fold (cons 1 (cons 2 (cons 3 (quote ())))) 0 (lambda (number acc) (+ number acc)))
    (cons
      (fold (quote ()) 0 (lambda (x acc) (- x acc)))
      (quote ()))))
