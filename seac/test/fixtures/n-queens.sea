; On the board below, the position of Q is (2 3)
; First goes the rank, then the file
;
;   \ 1 2 3
;   1 # # #
;   2 # # Q
;
; The following are the two solution for
;   (solve 2 3 2)
; , where x marks the covered lines
;
;   \ 1 2 3                 |      \ 1 2 3
;   1 x x Q  ... (1 3)      |      1 Q x x  ... (1 1)
;   2 Q x x  ... (2 1)      |      2 x x Q  ... (2 3)


( ; The n-queens problem

  ; IMPORTS
  (define list
    (lambda (.elements) .elements))

  (define identity
    (lambda (value) value))

  (define map
    (lambda (as f)
      (cond
        ((null? as) (quote ()))
        (else
          (cons (f (car as)) (map (cdr as) f))))))

  (define fold
    (lambda (as acc f)
      (cond
        ((null? as) acc)
        (else (fold (cdr as) (f acc (car as)) f)))))

  (define append
    (lambda (left right)
      (cond
        ((null? left) right)
        (else (cons (car left) (append (cdr left) right))))))

  (define contains?
    (lambda (list value)
      (cond
        ((null? list) false)
        ((same? (car list) value) true)
        (else (contains? (cdr list) value)))))

  (define union
    (lambda (left right)
      (cond
        ((null? left) right)
        ((null? right) left)
        ((contains? left (car right)) (union left (cdr right)))
        (else (union (append left (list (car right))) (cdr right))))))

  (define difference
    (lambda (left right)
      (cond
        ((null? left) (quote ()))
        ((contains? right (car left)) (difference (cdr left) right))
        (else (cons (car left) (difference (cdr left) right))))))
  ; IMPORTS

  (define increment
    (lambda (number) (+ number 1)))

  (define decrement
    (lambda (number) (- number 1)))

  (define rank-of car)
  (define file-of
    (lambda (position) (car (cdr position))))
  (define free-squares-of
    (lambda (board) (car (cdr (cdr board)))))

  (define Square list)
  (define Board list)

  (define queen-at list)

  (define generate-board
    (lambda (x y)
      (
        (define generate-board-helper
          (lambda (current-x current-y)
            (cond
              ((and (same? current-x x) (same? current-y y))
                (cons
                  (Square current-x current-y)
                  (quote ())))
              ((and (lt? current-x x) (same? current-y y))
                (cons
                  (Square current-x current-y)
                  (generate-board-helper (+ 1 current-x) 1)))
              (else
                (cons
                  (Square current-x current-y)
                  (generate-board-helper current-x (+ 1 current-y)))))))

        (cond
          ((or (zero? x) (zero? y)) (Board x y (quote ())))
          (else (Board x y (generate-board-helper 1 1)))))))

  (define calculate-covered-files
    (lambda (queen board)
      (
        (define file (file-of queen))

        (define loop
          (lambda (rank)
            (cond
              ((same? rank (rank-of board))
                (list (Square rank file)))
              (else
                (cons
                  (Square rank file)
                  (loop (increment rank)))))))

        (loop 1))))

  (define calculate-covered-ranks
    (lambda (queen board)
      (
        (define rank (rank-of queen))

        (define loop
          (lambda (file)
            (cond
              ((same? file (file-of board))
                (list (Square rank file)))
              (else
                (cons
                  (Square rank file)
                  (loop (increment file)))))))

        (loop 1))))

  (define find-anti-diagonal-origin
    (lambda (cell max-file)
      (
        (define rank-distance
          (- (file-of cell) 1))
        (define file-distance
          (- max-file (rank-of cell)))

        (cond
          ((lt? rank-distance file-distance)
            (Square
              (+ (file-of cell) rank-distance)
              (- (rank-of cell) rank-distance)))
          ((gt? rank-distance file-distance)
            (Square
              (+ (file-of cell) file-distance)
              (- (rank-of cell) file-distance)))
          (else
            (Square max-file 1))))))

  (define calculate-covered-anti-diagonal
    (lambda (queen board)
      (
        (define origin
          (find-anti-diagonal-origin queen (file-of board)))

        (define loop
          (lambda (rank file)
            (cond
              ((or (same? rank 1) (same? file (file-of board)))
                (list (Square rank file)))
              (else
                (cons
                  (Square rank file)
                  (loop (decrement rank) (increment file)))))))

        (loop (rank-of origin) (file-of origin)))))

  (define find-main-diagonal-origin
    (lambda (cell)
      (
        (define cell-rank (rank-of cell))
        (define cell-file (file-of cell))

        (cond
          ((lt? cell-rank cell-file)
            (Square 1 (increment (- cell-file cell-rank))))
          ((lt? cell-file cell-rank)
            (Square (increment (- cell-rank cell-file)) 1))
          (else (Square 1 1))))))

  (define calculate-covered-main-diagonal
    (lambda (queen board)
      (
        (define origin
          (find-main-diagonal-origin queen))

        (define loop
          (lambda (rank file)
            (cond
              ((or (same? (rank-of board) rank) (same? (file-of board) file))
                (list (Square rank file)))
              (else
                (cons
                  (Square rank file)
                  (loop (increment rank) (increment file)))))))

        (loop (rank-of origin) (file-of origin)))))

  (define calcs
    (list
      calculate-covered-main-diagonal
      calculate-covered-anti-diagonal
      calculate-covered-files
      calculate-covered-ranks))

  (define calculate-covered-squares
    (lambda (queen board calculators)
      (fold
        (cdr calculators)
        ((car calculators) queen board)
        (lambda (acc calculator) (union acc (calculator queen board))))))

  (define solve
    (lambda (board queens-to-place queens-placed)
        (cond
          ((zero? queens-to-place) queens-placed)
          ((null? (free-squares-of board)) (quote none))
          (else
            (
              (define placed-queen
                (car (free-squares-of board)))

              (define covered-squares
                (calculate-covered-squares placed-queen board calcs))

              (define available-squares
                (difference (free-squares-of board) covered-squares))

              (define solution
                (solve
                  (Board (rank-of board) (file-of board) available-squares)
                  (decrement queens-to-place)
                  (append queens-placed (list placed-queen))))

              (cond
                ((same? solution (quote none))
                  (solve
                    (Board (rank-of board) (file-of board) (cdr (free-squares-of board)))
                    queens-to-place
                    queens-placed))
                (else solution)))))))

  (solve (generate-board 4 4) 4 (quote ())))
