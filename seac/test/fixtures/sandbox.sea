( ; Sandbox

  ; IMPORTS
  (define list
    (lambda (.elements) .elements))

  (define identity
    (lambda (value) value))

  (define map
    (lambda (as f)
      (cond
        ((null? as) (quote ()))
        (else
          (cons (f (car as)) (map (cdr as) f))))))

  (define fold
    (lambda (as acc f)
      (cond
        ((null? as) acc)
        (else (fold (cdr as) (f acc (car as)) f)))))

  (define append
    (lambda (left right)
      (cond
        ((null? left) right)
        (else (cons (car left) (append (cdr left) right))))))

  (define contains?
    (lambda (list value)
      (cond
        ((null? list) false)
        ((same? (car list) value) true)
        (else (contains? (cdr list) value)))))

  (define union
    (lambda (left right)
      (cond
        ((null? left) right)
        ((null? right) left)
        ((contains? left (car right)) (union left (cdr right)))
        (else (union (append left (list (car right))) (cdr right))))))

  (define difference
    (lambda (left right)
      (cond
        ((null? left) (quote ()))
        ((contains? right (car left)) (difference (cdr left) right))
        (else (cons (car left) (difference (cdr left) right))))))
  ; IMPORTS

  (define max-file 4)
  (define max-rank 4)

  (define increment
    (lambda (number) (+ number 1)))

  (define decrement
    (lambda (number) (- number 1)))

  (define rank-of car)
  (define file-of
    (lambda (position) (car (cdr position))))

  (define Square list)

  (define queen-at list)

  (define generate-board
    (lambda (x y)
      (
        (define generate-board-helper
          (lambda (current-x current-y)
            (cond
              ((and (same? current-x x) (same? current-y y))
                (cons
                  (Square current-x current-y)
                  (quote ())))
              ((and (lt? current-x x) (same? current-y y))
                (cons
                  (Square current-x current-y)
                  (generate-board-helper (+ 1 current-x) 1)))
              (else
                (cons
                  (Square current-x current-y)
                  (generate-board-helper current-x (+ 1 current-y)))))))

        (generate-board-helper 1 1))))

  (define calculate-covered-files
    (lambda (queen)
      (
        (define file (file-of queen))

        (define loop
          (lambda (rank)
            (cond
              ((same? rank max-rank)
                (list (Square rank file)))
              (else
                (cons
                  (Square rank file)
                  (loop (increment rank)))))))

        (loop 1))))

  (define calculate-covered-ranks
    (lambda (queen)
      (
        (define rank (rank-of queen))

        (define loop
          (lambda (file)
            (cond
              ((same? file max-file)
                (list (Square rank file)))
              (else
                (cons
                  (Square rank file)
                  (loop (increment file)))))))

        (loop 1))))

  (define find-anti-diagonal-origin
    (lambda (cell)
      (
        (define rank-distance
          (- (file-of cell) 1))
        (define file-distance
          (- max-file (rank-of cell)))

        (cond
          ((lt? rank-distance file-distance)
            (Square
              (+ (file-of cell) rank-distance)
              (- (rank-of cell) rank-distance)))
          ((gt? rank-distance file-distance)
            (Square
              (+ (file-of cell) file-distance)
              (- (rank-of cell) file-distance)))
          (else
            (Square max-file 1))))))

  (define calculate-covered-anti-diagonal
    (lambda (queen)
      (
        (define origin
          (find-anti-diagonal-origin queen))

        (define loop
          (lambda (rank file)
            (cond
              ((or (same? rank 1) (same? file max-file))
                (list (Square rank file)))
              (else
                (cons
                  (Square rank file)
                  (loop (decrement rank) (increment file)))))))

        (loop (rank-of origin) (file-of origin)))))

  (define find-main-diagonal-origin
    (lambda (cell)
      (
        (define cell-rank (rank-of cell))
        (define cell-file (file-of cell))

        (cond
          ((lt? cell-rank cell-file)
            (Square 1 (increment (- cell-file cell-rank))))
          ((lt? cell-file cell-rank)
            (Square (increment (- cell-rank cell-file)) 1))
          (else (Square 1 1))))))

  (define calculate-covered-main-diagonal
    (lambda (queen)
      (
        (define origin
          (find-main-diagonal-origin queen))

        (define loop
          (lambda (rank file)
            (cond
              ((or (same? max-rank rank) (same? max-file file))
                (list (Square rank file)))
              (else
                (cons
                  (Square rank file)
                  (loop (increment rank) (increment file)))))))

        (loop (rank-of origin) (file-of origin)))))

  (define calcs
    (list
      calculate-covered-main-diagonal
      calculate-covered-anti-diagonal
      calculate-covered-files
      calculate-covered-ranks))

  (define calculate-covered-squares
    (lambda (queen calculators)
      (fold
        (cdr calculators)
        ((car calculators) queen)
        (lambda (acc calculator) (union acc (calculator queen))))))

  (define solve
    (lambda (board queens-to-place queens-placed)
        (cond
          ((zero? queens-to-place) queens-placed)
          ((null? board) (quote none))
          (else
            (
              (define placed-queen
                (car board))

              (define covered-squares
                (calculate-covered-squares placed-queen calcs))

              (define available-squares
                (difference board covered-squares))

              (define solution
                (solve
                  available-squares
                  (decrement queens-to-place)
                  (append queens-placed (list placed-queen))))

              (cond
                ((same? solution (quote none))
                  (solve (cdr board) queens-to-place queens-placed))
                (else solution)))))))

  (list
    (solve (generate-board 2 2) 0 (quote ()))
    (solve (quote ()) 0 (quote ()))
    (solve (quote ()) 7 (quote ()))
    (solve (generate-board 2 2) 1 (quote ()))
    (solve (generate-board 2 2) 2 (quote ()))
    (solve (generate-board 3 3) 2 (quote ()))
    (solve (generate-board 4 4) 4 (quote ()))
)
